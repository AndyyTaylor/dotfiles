call plug#begin('~/.config/nvim/plugged')

Plug 'arcticicestudio/nord-vim'
Plug 'nixprime/cpsm'
Plug 'romgrk/fzy-lua-native'
Plug 'gelguy/wilder.nvim'
Plug 'kyazdani42/nvim-web-devicons'
Plug 'ryanoasis/vim-devicons'
Plug 'sharkdp/fd'
Plug 'preservim/nerdtree'
Plug 'ycm-core/YouCompleteMe'
Plug 'kaicataldo/material.vim', { 'branch': 'main' }
Plug 'octol/vim-cpp-enhanced-highlight'
Plug '907th/vim-auto-save'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
" Plug 'sheerun/vim-polyglot'

call plug#end()

set nocompatible  " disable compatibility to old-time vi
set showmatch     " show matching brackets
set ignorecase    " case insensitive matching
set hlsearch      " highlight search results
set autoindent    " indent a new line the same amount as the line just typed
set number        " add line numbers
set wildmode=longest,list " get bash-like tab completions
" set cc=100        " 100 column border
filetype plugin indent on " auto-indenting depndending on file type
" set tapstop=4     " number of columns occupied by a tab character
set expandtab     " convert tabs to white space
set shiftwidth=4  " width for autoindents
set softtabstop=4 " multiple spaces as tabstops so <BS> does the right thing
" set mouse=v     " middle-click paste with mouse

set signcolumn=number
set completeopt-=preview
set tags=./tags,tags;

command B !ninja -C build

" Find files using Telescope command-line sugar.
nnoremap ff :Telescope find_files<CR>
nnoremap fg :Telescope live_grep<CR>
nnoremap fb :Telescope buffers<CR>
nnoremap fh :Telescope help_tags<CR>

autocmd VimEnter * NERDTree | wincmd p

function TagRefresh() 
    let gendir = substitute(system('pwd'), "\n", '', '') 

    execute "!ctags -R " . gendir . " &"
endfunction

autocmd BufWritePost * call TagRefresh()

let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_posix_standard = 1
let g:cpp_experimental_template_highlight = 1
" let g:cpp_experimental_simple_template_highlight = 1
let g:auto_save = 1  " enable AutoSave on Vim startup
let g:auto_save_silent = 1  " do not display the auto-save notification
let g:auto_save_events = ["InsertLeave", "TextChanged"]
let g:NERDTreeIgnore = ['tags']
let g:python_highlight_all = 1
let g:autotagCtagsCmd	= "ctags -R ."
let g:NERDTreeMinimalUI = 1
let g:NERDTreeChDirMode = 2

nnoremap <C-f> :NERDTreeFind<CR>

" For Neovim 0.1.3 and 0.1.4 - https://github.com/neovim/neovim/pull/2198
if (has('nvim'))
  let $NVIM_TUI_ENABLE_TRUE_COLOR = 1
endif

" For Neovim > 0.1.5 and Vim > patch 7.4.1799 - https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162
" Based on Vim patch 7.4.1770 (`guicolors` option) - https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd
" https://github.com/neovim/neovim/wiki/Following-HEAD#20160511
if (has('termguicolors'))
  set termguicolors
endif

let g:material_theme_style = 'dark'

syntax on
filetype on
colorscheme material

highlight Visual cterm=reverse ctermbg=NONE
highlight Search cterm=None ctermbg=blue
"
" wilder suggestions for nvim command bar
call wilder#setup({
      \ 'modes': [':', '/', '?'],
      \ 'next_key': '<Down>',
      \ 'previous_key': '<Up>',
      \ 'accept_key': '<Tab>',
      \ 'reject_key': '<S-Tab>',
      \ })

let s:highlighters = [
      \ wilder#pcre2_highlighter(),
      \ has('nvim') ? wilder#lua_fzy_highlighter() : wilder#cpsm_highlighter(),
      \ ]

let s:popupmenu_renderer = wilder#popupmenu_renderer(wilder#popupmenu_border_theme({
      \ 'border': 'rounded',
      \ 'empty_message': wilder#popupmenu_empty_message_with_spinner(),
      \ 'highlighter': s:highlighters,
      \ 'left': [
      \   ' ',
      \   wilder#popupmenu_devicons(),
      \   wilder#popupmenu_buffer_flags({
      \     'flags': ' a + ',
      \     'icons': {'+': '', 'a': '', 'h': ''},
      \   }),
      \ ],
      \ 'right': [
      \   ' ',
      \   wilder#popupmenu_scrollbar(),
      \ ],
      \ }))

let s:wildmenu_renderer = wilder#wildmenu_renderer({
      \ 'highlighter': s:highlighters,
      \ 'separator': ' · ',
      \ 'left': [' ', wilder#wildmenu_spinner(), ' '],
      \ 'right': [' ', wilder#wildmenu_index()],
      \ })

call wilder#set_option('renderer', wilder#renderer_mux({
      \ ':': s:popupmenu_renderer,
      \ '/': s:wildmenu_renderer,
      \ 'substitute': s:wildmenu_renderer,
      \ }))
